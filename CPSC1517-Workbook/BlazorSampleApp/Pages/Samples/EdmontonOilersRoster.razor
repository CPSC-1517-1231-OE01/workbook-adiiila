@page "/edmonton-oilers"
@using Hockey.Data

<h3>EdmontonOilersRoster</h3>

@if (FeedbackMessage != null)
{
    <div class="alert alert-danger">
        @FeedbackMessage
    </div>
}

@if (Players.Count > 0) 
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Name</th>
                <th>Jersey</th>
                <th>Position</th>
                <th>Shot</th>
                <th>Height</th>
                <th>Weight</th>
                <th>Hometown</th>
                <th>DOB</th>
            </tr>
        </thead>
        <tbody>
            @foreach(var player in Players)
            {
                <tr>
                    <td>@player.FirstName @player.LastName</td>
                    <td>@player.JerseyNumber</td>
                    <td>@player.Position</td>
                    <td>@player.Shot</td>
                    <td>@player.HeightInInches</td>
                    <td>@player.WeightInPounds</td>
                    <td>@player.BirthPlace</td>
                    <td>@player.DateOfBirth.ToString("d")</td>
                </tr>
            }
        </tbody>
    </table>
}



@code {
    private string? FeedbackMessage { get; set; }
    private List<HockeyPlayer> Players { get; set; } = new();  //Equivalent to new List<HockeyPlayer>();

    [Inject]
    public IWebHostEnvironment WebHostEnvironment { get; set; } = default!; // ! is the nullable bc we know it wont be null

    protected override void OnInitialized()
    {
        string csvFilePath = $@"{WebHostEnvironment.ContentRootPath}\Data\players.csv"; //@ - ignores the escape sequence so we dont have to do \\


        using (StreamReader reader = new StreamReader(csvFilePath))
        {
            // Skip the header
            reader.ReadLine();

            // Read in one line at a time until we reach the end of the file
            string? currentLine; //could be null becasue it'll be null if nothing is left to read

            while ((currentLine = reader.ReadLine()) != null)
            {
                try
                {
                    HockeyPlayer? currentPlayer = null;
                    if ((currentPlayer = HockeyPlayer.Parse(currentLine)) != null)
                    {
                        Players.Add(currentPlayer);
                    }
                }
                catch(Exception e)
                {
                    FeedbackMessage = e.Message;
                }
            }

            // Not neccessary in a using becasue using will automatically release all resources
            reader.Close();
        }

        base.OnInitialized();
    }
}
